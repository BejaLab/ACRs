
from pandas import read_excel
from warnings import filterwarnings

filterwarnings('ignore', category = UserWarning, module = 'openpyxl')

data = read_excel("metadata/Channelrhodopsins_Updated_List.xlsx", sheet_name = "full_channelrhodopsins")

all_sequences = {}
fun_sequences = {}

for i, row in data.iterrows():
    name = row['Sequence name']
    seq = row['Rhodopsin domain sequence'].upper()
    all_sequences[name] = seq
    if row['Currents'] and row['Currents'] == row['Currents'] and row['Currents'] != 'no photocurrents':
        fun_sequences[name] = seq

rule all:
    input:
        "analysis/all/iqtree.treefile.midpoint",
        "analysis/pdb/sequences.aln"

rule write_fasta:
    output:
        "analysis/{set}/sequences.fasta"
    params:
        seq = lambda w: fun_sequences if w.set == 'fun' else all_sequences
    script:
        "scripts/write_fasta.py"

rule mafft:
    input:
        "analysis/{set}/cdhit.fasta"
    output:
        "analysis/{set}/mafft.fasta"
    conda:
        "envs/tools.yaml"
    threads:
        workflow.cores
    shell:
        "mafft --thread {threads} --auto {input} > {output}"

rule cdhit:
    input:
        "analysis/{set}/sequences.fasta"
    output:
        "analysis/{set}/cdhit.fasta"
    params:
        c = 1
    conda:
        "envs/tools.yaml"
    shell:
        "cdhit -i {input} -o {output} -c {params.c} -d 0"

rule trimal:
    input:
        "analysis/{set}/mafft.fasta"
    output:
        "analysis/{set}/trimal.fasta"
    params:
        gt = 0.1
    conda:
        "envs/tools.yaml"
    shell:
        "trimal -in {input} -out {output} -gt {params.gt}"

rule midpoint:
    input:
        "analysis/{set}/iqtree.treefile"
    output:
        "analysis/{set}/iqtree.treefile.midpoint"
    conda:
        "envs/gotree.yaml"
    shell:
        "gotree reroot midpoint -i {input} -o {output}"

rule iqtree:
    input:
        "analysis/{set}/trimal.fasta"
    output:
        "analysis/{set}/iqtree.treefile"
    params:
        pers = 0.2,
        nstop = 500,
        seed = 123,
        B = 1000,
        prefix = "analysis/{set}/iqtree"
    threads:
        4
    conda:
        "envs/tools.yaml"
    shell:
        "iqtree2 -seed {params.seed} -s {input} -B {params.B} -T {threads} -pers {params.pers} -nstop {params.nstop} --prefix {params.prefix} -redo"

rule pdb2fasta:
    input:
        "pdb/template.txt"
    output:
        "analysis/pdb/sequences.fas"
    script:
        "scripts/pdb2fasta.py"

rule t_coffee:
    input:
        sequences = "analysis/pdb/sequences.fas",
        template = "pdb/template.txt"
    output:
        aln = "analysis/pdb/sequences.aln",
        dnd = "analysis/pdb/sequences.dnd"
    params:
        method = "sap_pair,mustang_pair,t_coffee_msa,probcons_msa",
        pdb_min_sim = 90,
        pdb_min_cov = 0
    threads:
        workflow.cores
    conda:
        "envs/t_coffee.yaml"
    shell:
        "t_coffee {input.sequences} -outfile {output.aln} -newtree {output.dnd} -method {params.method} -template_file {input.template} -pdb_min_sim {params.pdb_min_sim} -pdb_min_cov {params.pdb_min_cov} -n_core {threads}"

rule plot_tree:
    input:
        "analysis/{set}/iqtree.treefile"
    output:
        "output/{set}.pdf"
    script:
        "scripts/plot_tree.R"

rule features:
    input:
        "pdb/template.txt"
    output:
        "analysis/pdb/sequences.gff"
    conda:
        "envs/r.yaml"
    script:
        "scripts/features.R"
